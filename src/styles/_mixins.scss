@import 'variables';

/** ---Function--- **/

@function str-replace($string, $search, $replace: '') {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

@function map-deep-get($map, $keys...) {

	@each $key in $keys {
		$map: map-get($map, $key);
	}

	@return $map;
}

/** ---Mixins--- **/

@mixin font-face-woff2($name, $path, $filename: $name, $weight: normal, $style: normal) {

	@font-face {
		font-family: $name;
		font-weight: $weight;
		font-style: $style;
		src:
			url('#{$path}/#{$filename}/#{$filename}.woff2') format('woff2'),
			url('#{$path}/#{$filename}/#{$filename}.woff') format('woff');
	}
}

@mixin font-face($prefix, $path: '../assets/fonts/') {

	@font-face {
		font-family: $prefix;
		font-weight: normal;
		font-style: normal;
		src: url($path + $prefix + '/' + $prefix + '.eot');
		src:
			url($path + $prefix + '/' + $prefix + '.woff2') format('woff2'),
			url($path + $prefix + '/' + $prefix + '.woff') format('woff'),
			url($path + $prefix + '/' + $prefix + '.ttf') format('truetype'),
			url($path + $prefix + '/' + $prefix + '.svg#' + str-replace($prefix, '-', '')) format('svg');
	}
}

@mixin map-to-style($object) {

	@each $property, $value in $object {
		#{$property}: $value;
	}
}

@mixin transform-center($position: relative) {
	position: $position;
	top: 50%;
	left: 50%;
	transform: translateX(-50%) translateY(-50%);
}

@mixin transform-center-v($position: relative) {
	position: $position;
	top: 50%;
	transform: translateY(-50%);
}

@mixin transform-center-h($position: relative) {
	position: $position;
	left: 50%;
	transform: translateX(-50%);
}

@mixin absolute-center($width, $height) {
	position: absolute;
	top: 50%;
	left: 50%;
	width: $width;
	height: $height;
	margin-top: - $height / 2;
	margin-left: - $width / 2;
}

@mixin placeholder($color:#666, $autoreference: false) {

	@if $autoreference {

		&::-webkit-input-placeholder {
			color: $color;
		}

		&:-moz-placeholder {
			color: $color;
		}

		&::-moz-placeholder {
			color: $color;
		}

		&:-ms-input-placeholder {
			color: $color;
		}
	} @else {

		::-webkit-input-placeholder {
			color: $color;
		}

		:-moz-placeholder {
			color: $color;
		}

		::-moz-placeholder {
			color: $color;
		}

		:-ms-input-placeholder {
			color: $color;
		}
	}

	.placeholder {
		color: $color;
	}
}

@mixin selection($bg-color:#666, $color:#fff, $autoreference: false) {

	@if $autoreference {

		&::selection {
			background: $bg-color;
			color: $color;
		}

		&::-moz-selection {
			background: $bg-color;
			color: $color;
		}
	} @else {

		::selection {
			background: $bg-color;
			color: $color;
		}

		::-moz-selection {
			background: $bg-color;
			color: $color;
		}
	}
}

@mixin scrollbar($color:#777, $bg-color: transparent, $autoreference: false, $radius: 4px, $width: 8px) {

	@if $autoreference {

		&::-webkit-scrollbar {
			width: $width;
			height: $width;
		}

		&::-webkit-scrollbar-track {
			background: $bg-color;
		}

		&::-webkit-scrollbar-thumb {
			border-radius: $radius;
			background: $color;
		}
	} @else {

		::-webkit-scrollbar {
			width: $width;
			height: $width;
		}

		::-webkit-scrollbar-track {
			background: $bg-color;
		}

		::-webkit-scrollbar-thumb {
			border-radius: $radius;
			background: $color;
		}
	}
}

@mixin full-pos($position: relative) {
	position: $position;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
}

@mixin aspect-ratio($width, $height) {
	position: relative;

	&::before {
		display: block;
		width: 100%;
		padding-top: ($height / $width) * 100%;
		content: "";
	}
}