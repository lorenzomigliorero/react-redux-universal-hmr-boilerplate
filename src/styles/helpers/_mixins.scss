@import 'variables';

@mixin font-face-woff2($name, $path, $filename: $name, $weight: normal, $style: normal) {
	@font-face {
		font-family: $name;
		src: url('#{$path}/#{$filename}/#{$filename}.woff2') format('woff2'),
			 url('#{$path}/#{$filename}/#{$filename}.woff') format('woff');
		font-weight: $weight;
		font-style: $style;
	}
}

@mixin font-face($prefix, $path: '../assets/fonts/') {
	@font-face {
		font-family: $prefix;
		src: url($path + $prefix + '/' + $prefix + '.eot');
		src: url($path + $prefix + '/' + $prefix + '.woff2') format('woff2'),
			url($path + $prefix + '/' + $prefix + '.woff') format('woff'),
			url($path + $prefix + '/' + $prefix + '.ttf') format('truetype'),
			url($path + $prefix + '/' + $prefix + '.svg#' + str-replace($prefix, '-', '')) format('svg');
		    font-weight: normal;
		    font-style: normal;
	}
}

@mixin map-to-style($object) {
	
	@each $property, $value in $object {

		#{$property}: $value;

	}
	
};

@mixin transform-center($position: relative) {
	position: $position;
	top: 50%;
	left: 50%;
	transform: translateX(-50%) translateY(-50%);
}

@mixin transform-center-v($position: relative) {
	position: $position;
	top: 50%;
	transform: translateY(-50%);
}

@mixin transform-center-h($position: relative) {
	position: $position;
	left: 50%;
	transform: translateX(-50%);
}

@mixin absolute-center($width, $height) {
	position: absolute;
	top: 50%;
	left: 50%;
	margin-left: - $width / 2;
	margin-top: - $height / 2;
	width: $width;
	height: $height;
}

@mixin placeholder($color:#666, $autoreference: false) {
	
	@if $autoreference {
		&::-webkit-input-placeholder {color: $color;}
		&:-moz-placeholder {color: $color;}
		&::-moz-placeholder {color: $color;}
		&:-ms-input-placeholder {color: $color;}
	} @else {
		::-webkit-input-placeholder {color: $color;}
		:-moz-placeholder {color: $color;}
		::-moz-placeholder {color: $color;}
		:-ms-input-placeholder {color: $color;}
	}
	.placeholder{color: $color;}
}

@mixin selection($bg-color:#666, $color:#fff, $autoreference: false) {
	@if $autoreference {
		&::selection {background: $bg-color; color: $color;}
		&::-moz-selection {background: $bg-color; color: $color;}
	} @else {
		::selection {background: $bg-color; color: $color;}
		::-moz-selection {background: $bg-color; color: $color;}
	}
}

@mixin scrollbar($color:#777, $bg-color: transparent, $autoreference: false, $radius: 4px, $width: 8px) {
	@if $autoreference {
		
		&::-webkit-scrollbar {
		    width: $width;
		    height: $width;
		}

		&::-webkit-scrollbar-track {
			background: $bg-color;
		}

		&::-webkit-scrollbar-thumb {
			background: $color;
			border-radius: $radius;
		}

	} @else {
	
		::-webkit-scrollbar {
		    width: $width;
		    height: $width;
		}

		::-webkit-scrollbar-track {
			background: $bg-color;
		}

		::-webkit-scrollbar-thumb {
			background: $color;
			border-radius: $radius;
		}		

	}
}

@mixin full-pos($position: relative) {
	position: $position;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
}

@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
}

@mixin breakpoint($class) {
  @if $class == xs {
    @media (map-get($breakpoints, xs)) { @content; }
  }
 
  @else if $class == sm {
    @media (map-get($breakpoints, sm)) { @content; }
  }
 
  @else if $class == md {
    @media (map-get($breakpoints, md)) { @content; }
  }
 
  @else if $class == lg {
    @media (map-get($breakpoints, lg)) { @content; }
  }
 
  @else {
    @warn "Breakpoint mixin supports: xs, sm, md, lg";
  }
}